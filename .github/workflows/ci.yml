name: CI DevSecOps

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Prepare PEM Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY}}" > ~/.ssh/devsecops-key.pem
          chmod 600 ~/.ssh/devsecops-key.pem

      - name: Terraform Init
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform init
      - name: Terraform Destroy & apply
        working-directory: terraform
        continue-on-error: true   # <--- ne bloque pas si rien à détruire
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        run: |
          terraform destroy -auto-approve
          terraform apply -auto-approve

      - name: Get EC2 Public IP
        id: get_ip
        working-directory: terraform
        run: |
          IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      - name: Install K3s (without Traefik)
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/devsecops-key.pem ubuntu@$EC2_IP \
            "apt-get install docker.io -y" \
            "curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='--disable traefik' sh -"

      - name: Install NGINX Ingress + cert-manager
        run: |
          ssh -i ~/.ssh/devsecops-key.pem ubuntu@$EC2_IP <<'EOF'
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.9.4/deploy/static/provider/cloud/deploy.yaml
            kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml


      - name: Deploy Kubernetes manifests
        run: |
          scp -i ~/.ssh/devsecops-key.pem -r k8s ubuntu@$EC2_IP:/home/ubuntu/
          ssh -i ~/.ssh/devsecops-key.pem ubuntu@$EC2_IP "kubectl apply -f /home/ubuntu/k8s"
      
      - name: Security Scans
        run: |
          # Scanner tout le dossier courant (y compris docker/ et policy/)
          docker run --rm -v $(pwd):/app aquasec/trivy fs /app
 
          # Linter le Dockerfile situé dans ./docker/
          docker run --rm -i hadolint/hadolint < docker/Dockerfile
 
          # Linter tous les fichiers YAML dans le dossier k8s/
          yamllint k8s/

          # Tester la règle Conftest sur le manifeste Kubernetes avec le policy dans ./policy/
          conftest test k8s/deployment.yaml -p policy/
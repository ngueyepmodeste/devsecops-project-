name: CI DevSecOps

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Prepare PEM Key
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.EC2_SSH_PRIVATE_KEY}}" > ~/.ssh/devsecops2-key.pem
          chmod 600 ~/.ssh/devsecops2-key.pem

      - name: Terraform Init
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Terraform Destroy (clean)
        working-directory: terraform
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform destroy -auto-approve -input=false

      - name: Terraform Apply
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve -input=false

      - name: Get EC2 Public IP
        id: get_ip
        working-directory: terraform
        run: |
          IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_IP=$IP" >> $GITHUB_ENV
        shell: bash

      - name: Wait for SSH to be ready
        run: |
          for i in {1..15}; do
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/devsecops2-key.pem ubuntu@$EC2_IP 'echo SSH ready' && break
            echo "Waiting for SSH..."
            sleep 10
          done

      - name: Install K3s (without Traefik)
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/devsecops2-key.pem ubuntu@$EC2_IP \
            "curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='--disable traefik --write-kubeconfig-mode 644' sh -"

      - name: Install NGINX Ingress + cert-manager
        run: |
         ssh -i ~/.ssh/devsecops2-key.pem ubuntu@$EC2_IP "\
           kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.9.4/deploy/static/provider/cloud/deploy.yaml && \
           kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml"

      - name: Wait for Kubernetes API and controllers readiness
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/devsecops2-key.pem ubuntu@$EC2_IP bash -c "'
            echo \"Waiting for Kubernetes API to become available...\"
            for i in {1..30}; do
              kubectl get nodes && break
              echo \"Kubernetes API not ready yet, retrying in 10s...\"
              sleep 10
          done

          echo \"Waiting for cert-manager deployments...\"
          kubectl wait --for=condition=available --timeout=600s deployment/cert-manager -n cert-manager
          kubectl wait --for=condition=available --timeout=600s deployment/cert-manager-webhook -n cert-manager
          kubectl wait --for=condition=available --timeout=600s deployment/cert-manager-cainjector -n cert-manager

          echo \"Waiting for ingress-nginx deployment...\"
          kubectl wait --for=condition=available --timeout=600s deployment/ingress-nginx-controller -n ingress-nginx'"


      - name: Deploy Kubernetes manifests
        run: |
         scp -o StrictHostKeyChecking=no -i ~/.ssh/devsecops2-key.pem -r k8s ubuntu@$EC2_IP:/home/ubuntu/
         ssh -o StrictHostKeyChecking=no -i ~/.ssh/devsecops2-key.pem ubuntu@$EC2_IP "
           kubectl apply -f /home/ubuntu/k8s
           kubectl get all -A"

          

      - name: scan de tous les fichiers et code de l'app
        run: |
          docker run --rm -v $(pwd):/app aquasec/trivy fs /app
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          apt-get install docker.io -y
      - name: Security Scans
        run: |
          docker run --rm \
            -v $(pwd):/app \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image \
            --format template \
            --template "@contrib/html.tpl" \
            -o trivy-report.html \
           ngueyepmodeste/ic-webapp:1.0
  
          docker run --rm -i hadolint/hadolint < docker/Dockerfile || true

          yamllint k8s/
  
          conftest test k8s/deployment.yaml -p policy/

      - name: Copy Trivy report to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/devsecops2-key.pem trivy-report.html ubuntu@$EC2_IP:/home/ubuntu/

